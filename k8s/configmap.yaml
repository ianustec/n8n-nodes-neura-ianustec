apiVersion: v1
kind: ConfigMap
metadata:
  name: n8n-node-installer-script
  namespace: lair
  labels:
    app.kubernetes.io/name: n8n-node-installer
    app.kubernetes.io/part-of: neura-services
data:
  install-node.sh: |
    #!/bin/bash
    set -euo pipefail

    echo "üöÄ NEURA | IANUSTEC AI Node Installer Started"
    echo "============================================="

    # Configuration
    N8N_SERVICE_NAME="${N8N_SERVICE_NAME:-n8n}"
    N8N_NAMESPACE="${N8N_NAMESPACE:-lair}"
    N8N_PORT="${N8N_PORT:-5678}"
    MAX_WAIT_TIME="${MAX_WAIT_TIME:-300}"
    CHECK_INTERVAL="${CHECK_INTERVAL:-10}"
    NODE_PACKAGE="${NODE_PACKAGE:-n8n-nodes-neura-ianustec}"
    NODE_VERSION="${NODE_VERSION:-0.1.0}"

    echo "üìã Configuration:"
    echo "  - N8N Service: ${N8N_SERVICE_NAME}.${N8N_NAMESPACE}.svc.cluster.local:${N8N_PORT}"
    echo "  - Node Package: ${NODE_PACKAGE}@${NODE_VERSION}"
    echo "  - Max Wait Time: ${MAX_WAIT_TIME}s"
    echo ""

    # Function to check if n8n is ready
    check_n8n_ready() {
        local url="http://${N8N_SERVICE_NAME}.${N8N_NAMESPACE}.svc.cluster.local:${N8N_PORT}/healthz"
        echo "üîç Checking n8n health at: ${url}"
        
        if curl -f -s --max-time 5 "${url}" > /dev/null 2>&1; then
            echo "‚úÖ n8n is healthy and ready!"
            return 0
        else
            echo "‚è≥ n8n is not ready yet..."
            return 1
        fi
    }

    # Function to check if n8n deployment/statefulset is ready
    check_n8n_deployment_ready() {
        echo "üîç Checking n8n deployment status..."
        
        # Check for deployment
        if kubectl get deployment "${N8N_SERVICE_NAME}" -n "${N8N_NAMESPACE}" >/dev/null 2>&1; then
            local ready_replicas=$(kubectl get deployment "${N8N_SERVICE_NAME}" -n "${N8N_NAMESPACE}" -o jsonpath='{.status.readyReplicas}' 2>/dev/null || echo "0")
            local desired_replicas=$(kubectl get deployment "${N8N_SERVICE_NAME}" -n "${N8N_NAMESPACE}" -o jsonpath='{.spec.replicas}' 2>/dev/null || echo "1")
            
            if [[ "${ready_replicas}" == "${desired_replicas}" ]] && [[ "${ready_replicas}" != "0" ]]; then
                echo "‚úÖ n8n deployment is ready (${ready_replicas}/${desired_replicas} replicas)"
                return 0
            else
                echo "‚è≥ n8n deployment not ready (${ready_replicas}/${desired_replicas} replicas)"
                return 1
            fi
        fi
        
        # Check for statefulset
        if kubectl get statefulset "${N8N_SERVICE_NAME}" -n "${N8N_NAMESPACE}" >/dev/null 2>&1; then
            local ready_replicas=$(kubectl get statefulset "${N8N_SERVICE_NAME}" -n "${N8N_NAMESPACE}" -o jsonpath='{.status.readyReplicas}' 2>/dev/null || echo "0")
            local desired_replicas=$(kubectl get statefulset "${N8N_SERVICE_NAME}" -n "${N8N_NAMESPACE}" -o jsonpath='{.spec.replicas}' 2>/dev/null || echo "1")
            
            if [[ "${ready_replicas}" == "${desired_replicas}" ]] && [[ "${ready_replicas}" != "0" ]]; then
                echo "‚úÖ n8n statefulset is ready (${ready_replicas}/${desired_replicas} replicas)"
                return 0
            else
                echo "‚è≥ n8n statefulset not ready (${ready_replicas}/${desired_replicas} replicas)"
                return 1
            fi
        fi
        
        echo "‚ùå No n8n deployment or statefulset found"
        return 1
    }

    # Wait for n8n to be ready
    echo "‚è≥ Waiting for n8n to be ready..."
    elapsed=0

    while [[ $elapsed -lt $MAX_WAIT_TIME ]]; do
        if check_n8n_deployment_ready && check_n8n_ready; then
            echo "üéâ n8n is fully ready! Proceeding with node installation..."
            break
        fi
        
        echo "üí§ Waiting ${CHECK_INTERVAL}s before next check... (${elapsed}/${MAX_WAIT_TIME}s elapsed)"
        sleep $CHECK_INTERVAL
        elapsed=$((elapsed + CHECK_INTERVAL))
    done

    if [[ $elapsed -ge $MAX_WAIT_TIME ]]; then
        echo "‚ùå Timeout waiting for n8n to be ready after ${MAX_WAIT_TIME}s"
        echo "üîç Final status check:"
        check_n8n_deployment_ready || true
        check_n8n_ready || true
        exit 1
    fi

    # Install the n8n community node
    echo ""
    echo "üì¶ Installing NEURA | IANUSTEC AI Community Node..."
    echo "=================================================="

    # Configuration for NEURA internal services
    NEURA_BASE_URL="${NEURA_BASE_URL:-http://llm-neura-service.llm-neura.svc.cluster.local/v1}"
    NEURA_API_KEY="${NEURA_API_KEY:-aa3cd3ec5a34b5d180a83927dd1f604c0164e28685b3e5cf93ecf04f0c2667ee}"

    echo "üîß NEURA Configuration:"
    echo "  - Base URL: ${NEURA_BASE_URL}"
    echo "  - API Key: ${NEURA_API_KEY:0:8}...${NEURA_API_KEY: -8}"

    # Create temporary directory for node installation
    TEMP_DIR=$(mktemp -d)
    cd "$TEMP_DIR"

    echo "üìÅ Working directory: $TEMP_DIR"
    echo "üîß Installing Node.js dependencies..."

    # Initialize npm project
    npm init -y

    # Install the community node
    echo "üì• Installing ${NODE_PACKAGE}@${NODE_VERSION}..."
    if npm install "${NODE_PACKAGE}@${NODE_VERSION}"; then
        echo "‚úÖ Successfully installed ${NODE_PACKAGE}@${NODE_VERSION}"
    else
        echo "‚ùå Failed to install ${NODE_PACKAGE}@${NODE_VERSION}"
        exit 1
    fi

    # Verify installation
    echo "üîç Verifying installation..."
    if npm list "${NODE_PACKAGE}" --depth=0; then
        echo "‚úÖ Node package verification successful"
    else
        echo "‚ùå Node package verification failed"
        exit 1
    fi

    # Copy node files to n8n nodes directory (if accessible via shared volume)
    if [[ -n "${N8N_NODES_PATH:-}" ]] && [[ -d "${N8N_NODES_PATH}" ]]; then
        echo "üìÇ Copying node files to n8n nodes directory: ${N8N_NODES_PATH}"
        
        # Create target directory
        TARGET_DIR="${N8N_NODES_PATH}/${NODE_PACKAGE}"
        mkdir -p "$TARGET_DIR"
        
        # Copy node_modules content
        if cp -r "node_modules/${NODE_PACKAGE}"/* "$TARGET_DIR/"; then
            echo "‚úÖ Successfully copied node files to ${TARGET_DIR}"
        else
            echo "‚ùå Failed to copy node files"
            exit 1
        fi
    else
        echo "‚ÑπÔ∏è  N8N_NODES_PATH not set or not accessible, skipping file copy"
        echo "   The node should be installed via n8n's Community Nodes UI instead"
    fi

    # Cleanup
    cd /
    rm -rf "$TEMP_DIR"

    # Configure n8n credentials automatically
    echo ""
    echo "üîß Configuring NEURA | IANUSTEC AI Credentials in n8n..."
    echo "======================================================="

    N8N_API_URL="http://${N8N_SERVICE_NAME}.${N8N_NAMESPACE}.svc.cluster.local:${N8N_PORT}"

    # Function to configure n8n credentials via API
    configure_n8n_credentials() {
        echo "üîë Creating NEURA | IANUSTEC AI credentials in n8n..."
        
        # Check if n8n API is accessible
        if ! curl -f -s --max-time 5 "${N8N_API_URL}/healthz" > /dev/null 2>&1; then
            echo "‚ö†Ô∏è  n8n API not accessible, skipping automatic credential configuration"
            echo "   Please configure credentials manually in n8n UI"
            return 1
        fi
        
        # Create credentials payload
        CREDENTIALS_PAYLOAD=$(cat <<EOF
    {
      "name": "NEURA Internal API",
      "type": "neuraIanustecApi",
      "data": {
        "baseUrl": "${NEURA_BASE_URL}",
        "apiKey": "${NEURA_API_KEY}",
        "organization": "",
        "timeout": 60000,
        "rejectUnauthorized": false
      }
    }
    EOF
    )
        
        echo "üì° Attempting to create credentials via n8n API..."
        
        # Try to create credentials (this might fail if n8n requires authentication)
        if curl -f -s -X POST \
            -H "Content-Type: application/json" \
            -d "${CREDENTIALS_PAYLOAD}" \
            "${N8N_API_URL}/rest/credentials" > /dev/null 2>&1; then
            echo "‚úÖ Successfully created NEURA credentials in n8n!"
            return 0
        else
            echo "‚ö†Ô∏è  Could not create credentials automatically (n8n may require authentication)"
            echo "   Please create credentials manually with the following configuration:"
            echo ""
            echo "   Credential Type: NEURA | IANUSTEC AI API"
            echo "   Name: NEURA Internal API"
            echo "   Base URL: ${NEURA_BASE_URL}"
            echo "   API Key: ${NEURA_API_KEY}"
            echo "   Organization: (leave empty)"
            echo "   Timeout: 60000"
            echo "   Reject Unauthorized: false"
            return 1
        fi
    }

    # Try to configure credentials
    configure_n8n_credentials || true

    echo ""
    echo "üéä NEURA | IANUSTEC AI Node Installation Completed Successfully!"
    echo "=============================================================="
    echo ""
    echo "üìã Configuration Summary:"
    echo "‚úÖ Node package installed and verified"
    echo "‚úÖ NEURA internal service configuration ready"
    echo "   - Base URL: ${NEURA_BASE_URL}"
    echo "   - API Key: Configured"
    echo ""
    echo "üìã Next Steps:"
    echo "1. Install node in n8n: Settings ‚Üí Community Nodes ‚Üí Install: ${NODE_PACKAGE}"
    echo "2. Verify credentials: Settings ‚Üí Credentials ‚Üí NEURA Internal API"
    echo "3. Start using Chat Completions and Embeddings in your workflows!"
    echo ""
    echo "üîó Documentation: https://github.com/ianustec/n8n-nodes-neura-ianustec"
    echo ""
    echo "‚ú® Happy Automating with NEURA | IANUSTEC AI! ‚ú®"
