{
  "name": "NEURA | IANUSTEC AI - Test Workflow",
  "nodes": [
    {
      "parameters": {},
      "id": "f6b4c5d7-8e9f-4a1b-2c3d-4e5f6a7b8c9d",
      "name": "Start",
      "type": "n8n-nodes-base.start",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "resource": "chat",
        "operation": "create",
        "model": "gpt-4o-mini",
        "systemMessage": "You are a helpful AI assistant specialized in explaining technical concepts clearly and concisely.",
        "userMessage": "Explain what n8n is and how it helps with automation.",
        "temperature": 0.7,
        "topP": 1,
        "maxTokens": 150
      },
      "id": "a1b2c3d4-e5f6-7a8b-9c0d-1e2f3a4b5c6d",
      "name": "Chat Completion - Basic",
      "type": "neuraIanustec",
      "typeVersion": 1,
      "position": [460, 200],
      "credentials": {
        "neuraIanustecApi": {
          "id": "your-credential-id",
          "name": "NEURA | IANUSTEC AI API"
        }
      }
    },
    {
      "parameters": {
        "resource": "chat",
        "operation": "create",
        "model": "gpt-4o-mini",
        "userMessage": "What's the weather like in Paris, France?",
        "temperature": 0.3,
        "toolsJson": {
          "tools": [
            {
              "type": "function",
              "function": {
                "name": "get_weather",
                "description": "Get current weather information for a specific city",
                "parameters": {
                  "type": "object",
                  "properties": {
                    "city": {
                      "type": "string",
                      "description": "The city name"
                    },
                    "country": {
                      "type": "string",
                      "description": "The country name"
                    }
                  },
                  "required": ["city"]
                }
              }
            }
          ],
          "tool_choice": "auto"
        },
        "advancedOptions": {
          "storeRaw": true
        }
      },
      "id": "b2c3d4e5-f6a7-8b9c-0d1e-2f3a4b5c6d7e",
      "name": "Chat Completion - With Tools",
      "type": "neuraIanustec",
      "typeVersion": 1,
      "position": [460, 380],
      "credentials": {
        "neuraIanustecApi": {
          "id": "your-credential-id",
          "name": "NEURA | IANUSTEC AI API"
        }
      }
    },
    {
      "parameters": {
        "resource": "embeddings",
        "operation": "create",
        "embModel": "text-embedding-ada-002",
        "embInput": "This is a sample text for generating embeddings using the NEURA | IANUSTEC AI node."
      },
      "id": "c3d4e5f6-a7b8-9c0d-1e2f-3a4b5c6d7e8f",
      "name": "Embeddings - Single Text",
      "type": "neuraIanustec",
      "typeVersion": 1,
      "position": [460, 560],
      "credentials": {
        "neuraIanustecApi": {
          "id": "your-credential-id",
          "name": "NEURA | IANUSTEC AI API"
        }
      }
    },
    {
      "parameters": {
        "resource": "embeddings",
        "operation": "create",
        "embModel": "text-embedding-ada-002",
        "embInput": "[\"First document for embedding\", \"Second document for embedding\", \"Third document for embedding\"]",
        "advancedOptions": {
          "binaryFile": "embeddings_response.json"
        }
      },
      "id": "d4e5f6a7-b8c9-0d1e-2f3a-4b5c6d7e8f9a",
      "name": "Embeddings - Multiple Texts",
      "type": "neuraIanustec",
      "typeVersion": 1,
      "position": [460, 740],
      "credentials": {
        "neuraIanustecApi": {
          "id": "your-credential-id",
          "name": "NEURA | IANUSTEC AI API"
        }
      }
    },
    {
      "parameters": {
        "resource": "chat",
        "operation": "create",
        "model": "invalid-model-name",
        "userMessage": "This should trigger an error for testing error handling.",
        "continueOnFail": true
      },
      "id": "e5f6a7b8-c9d0-1e2f-3a4b-5c6d7e8f9a0b",
      "name": "Error Handling Test",
      "type": "neuraIanustec",
      "typeVersion": 1,
      "position": [460, 920],
      "credentials": {
        "neuraIanustecApi": {
          "id": "your-credential-id",
          "name": "NEURA | IANUSTEC AI API"
        }
      }
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "test_type",
              "value": "chat_basic"
            },
            {
              "name": "status",
              "value": "={{ $json.error ? 'failed' : 'success' }}"
            },
            {
              "name": "content",
              "value": "={{ $json.content || $json.error || 'No content' }}"
            }
          ]
        },
        "options": {}
      },
      "id": "f6a7b8c9-d0e1-2f3a-4b5c-6d7e8f9a0b1c",
      "name": "Format Results",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [680, 200]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "test_type",
              "value": "chat_tools"
            },
            {
              "name": "status",
              "value": "={{ $json.error ? 'failed' : 'success' }}"
            },
            {
              "name": "has_tool_calls",
              "value": "={{ $json.message && $json.message.tool_calls ? 'yes' : 'no' }}"
            }
          ]
        },
        "options": {}
      },
      "id": "a7b8c9d0-e1f2-3a4b-5c6d-7e8f9a0b1c2d",
      "name": "Format Tools Results",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [680, 380]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "test_type",
              "value": "embeddings_single"
            },
            {
              "name": "status",
              "value": "={{ $json.error ? 'failed' : 'success' }}"
            },
            {
              "name": "embedding_count",
              "value": "={{ $json.embeddings ? $json.embeddings.length : 0 }}"
            }
          ]
        },
        "options": {}
      },
      "id": "b8c9d0e1-f2a3-4b5c-6d7e-8f9a0b1c2d3e",
      "name": "Format Embeddings Results",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [680, 560]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "test_type",
              "value": "embeddings_multiple"
            },
            {
              "name": "status",
              "value": "={{ $json.error ? 'failed' : 'success' }}"
            },
            {
              "name": "has_binary",
              "value": "={{ $binary && $binary.embeddings_response ? 'yes' : 'no' }}"
            }
          ]
        },
        "options": {}
      },
      "id": "c9d0e1f2-a3b4-5c6d-7e8f-9a0b1c2d3e4f",
      "name": "Format Multiple Embeddings Results",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [680, 740]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "test_type",
              "value": "error_handling"
            },
            {
              "name": "status",
              "value": "={{ $json.error ? 'error_handled' : 'unexpected_success' }}"
            },
            {
              "name": "error_message",
              "value": "={{ $json.error || 'No error' }}"
            }
          ]
        },
        "options": {}
      },
      "id": "d0e1f2a3-b4c5-6d7e-8f9a-0b1c2d3e4f5a",
      "name": "Format Error Results",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [680, 920]
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll"
      },
      "id": "e1f2a3b4-c5d6-7e8f-9a0b-1c2d3e4f5a6b",
      "name": "Merge All Results",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [900, 560]
    },
    {
      "parameters": {
        "content": "## NEURA | IANUSTEC AI Node Test Results\n\n**Test Summary:**\n{{ $json.length }} tests executed\n\n**Results:**\n{% for item in $json %}\n- **{{ item.test_type }}**: {{ item.status }}\n  {% if item.content %}Content: {{ item.content[:100] }}...\n  {% endif %}{% if item.has_tool_calls %}Tool calls detected: {{ item.has_tool_calls }}\n  {% endif %}{% if item.embedding_count %}Embeddings generated: {{ item.embedding_count }}\n  {% endif %}{% if item.has_binary %}Binary output: {{ item.has_binary }}\n  {% endif %}{% if item.error_message %}Error: {{ item.error_message }}\n  {% endif %}\n{% endfor %}\n\n**Overall Status:** {% if $json | selectattr('status', 'equalto', 'failed') | list | length > 0 %}❌ Some tests failed{% else %}✅ All tests passed{% endif %}",
        "options": {}
      },
      "id": "f2a3b4c5-d6e7-8f9a-0b1c-2d3e4f5a6b7c",
      "name": "Generate Test Report",
      "type": "n8n-nodes-base.markdown",
      "typeVersion": 1,
      "position": [1120, 560]
    }
  ],
  "connections": {
    "Start": {
      "main": [
        [
          {
            "node": "Chat Completion - Basic",
            "type": "main",
            "index": 0
          },
          {
            "node": "Chat Completion - With Tools",
            "type": "main",
            "index": 0
          },
          {
            "node": "Embeddings - Single Text",
            "type": "main",
            "index": 0
          },
          {
            "node": "Embeddings - Multiple Texts",
            "type": "main",
            "index": 0
          },
          {
            "node": "Error Handling Test",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Chat Completion - Basic": {
      "main": [
        [
          {
            "node": "Format Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Chat Completion - With Tools": {
      "main": [
        [
          {
            "node": "Format Tools Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings - Single Text": {
      "main": [
        [
          {
            "node": "Format Embeddings Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings - Multiple Texts": {
      "main": [
        [
          {
            "node": "Format Multiple Embeddings Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Handling Test": {
      "main": [
        [
          {
            "node": "Format Error Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Results": {
      "main": [
        [
          {
            "node": "Merge All Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Tools Results": {
      "main": [
        [
          {
            "node": "Merge All Results",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Format Embeddings Results": {
      "main": [
        [
          {
            "node": "Merge All Results",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Format Multiple Embeddings Results": {
      "main": [
        [
          {
            "node": "Merge All Results",
            "type": "main",
            "index": 3
          }
        ]
      ]
    },
    "Format Error Results": {
      "main": [
        [
          {
            "node": "Merge All Results",
            "type": "main",
            "index": 4
          }
        ]
      ]
    },
    "Merge All Results": {
      "main": [
        [
          {
            "node": "Generate Test Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2024-01-15T10:00:00.000Z",
  "versionId": "1"
}
